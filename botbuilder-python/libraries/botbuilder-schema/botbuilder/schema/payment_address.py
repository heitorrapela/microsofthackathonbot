# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class PaymentAddress(Model):
    """Address within a Payment Request.

    :param country: This is the CLDR (Common Locale Data Repository) region
     code. For example, US, GB, CN, or JP
    :type country: str
    :param address_line: This is the most specific part of the address. It can
     include, for example, a street name, a house number, apartment number, a
     rural delivery route, descriptive instructions, or a post office box
     number.
    :type address_line: list[str]
    :param region: This is the top level administrative subdivision of the
     country. For example, this can be a state, a province, an oblast, or a
     prefecture.
    :type region: str
    :param city: This is the city/town portion of the address.
    :type city: str
    :param dependent_locality: This is the dependent locality or sublocality
     within a city. For example, used for neighborhoods, boroughs, districts,
     or UK dependent localities.
    :type dependent_locality: str
    :param postal_code: This is the postal code or ZIP code, also known as PIN
     code in India.
    :type postal_code: str
    :param sorting_code: This is the sorting code as used in, for example,
     France.
    :type sorting_code: str
    :param language_code: This is the BCP-47 language code for the address.
     It's used to determine the field separators and the order of fields when
     formatting the address for display.
    :type language_code: str
    :param organization: This is the organization, firm, company, or
     institution at this address.
    :type organization: str
    :param recipient: This is the name of the recipient or contact person.
    :type recipient: str
    :param phone: This is the phone number of the recipient or contact person.
    :type phone: str
    """

    _attribute_map = {
        'country': {'key': 'country', 'type': 'str'},
        'address_line': {'key': 'addressLine', 'type': '[str]'},
        'region': {'key': 'region', 'type': 'str'},
        'city': {'key': 'city', 'type': 'str'},
        'dependent_locality': {'key': 'dependentLocality', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'sorting_code': {'key': 'sortingCode', 'type': 'str'},
        'language_code': {'key': 'languageCode', 'type': 'str'},
        'organization': {'key': 'organization', 'type': 'str'},
        'recipient': {'key': 'recipient', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(PaymentAddress, self).__init__(**kwargs)
        self.country = kwargs.get('country', None)
        self.address_line = kwargs.get('address_line', None)
        self.region = kwargs.get('region', None)
        self.city = kwargs.get('city', None)
        self.dependent_locality = kwargs.get('dependent_locality', None)
        self.postal_code = kwargs.get('postal_code', None)
        self.sorting_code = kwargs.get('sorting_code', None)
        self.language_code = kwargs.get('language_code', None)
        self.organization = kwargs.get('organization', None)
        self.recipient = kwargs.get('recipient', None)
        self.phone = kwargs.get('phone', None)
